class SmileyStatusBar : BaseStatusBar
{
	HUDFont mHUDFont;
	HUDFont mIndexFont;
	HUDFont mAmountFont;
	InventoryBarState diparms;

	int AllyHealth, AllyMugshotIdleTime, AllyMugshotIdleRND;
	int AllyDMGDir, AllyDMGDelay;

	string CurrentLevel, SphereImage;
	bool ResurrectHUDSide;
	int ResurrectHUDCount, ResurrectHUDFrames;
	TextureID sphereTex;

	override void Init()
	{
		Super.Init();
		SetSize(32, 320, 200);

		// Create the font used for the fullscreen HUD
		Font fnt = "HUDFONT_DOOM";
		mHUDFont = HUDFont.Create(fnt, fnt.GetCharWidth("0"), Mono_CellLeft, 1, 1);
		fnt = "INDEXFONT_DOOM";
		mIndexFont = HUDFont.Create(fnt, fnt.GetCharWidth("0"), Mono_CellLeft);
		mAmountFont = HUDFont.Create("INDEXFONT");
		diparms = InventoryBarState.Create();

		CurrentLevel = level.mapname;
	}

	override void Draw (int state, double TicFrac)
	{
		Super.Draw (state, TicFrac);
		if (state == HUD_StatusBar)
		{
			BeginStatusBar();
			DrawMainBar (TicFrac);
		}
		else if (state == HUD_Fullscreen)
		{
			BeginHUD();
			DrawFullScreenStuff ();
		}
	}

	protected void DrawMainBar (double TicFrac)
	{
		if (CPlayer.mo is 'Emoley')
		{
			DrawImage("EMOBAR", (0, 168), DI_ITEM_OFFSETS);
		}
		else
			DrawImage("STBAR", (0, 168), DI_ITEM_OFFSETS);
		
		DrawImage("STTPRCNT", (90, 171), DI_ITEM_OFFSETS);
		DrawImage("STTPRCNT", (221, 171), DI_ITEM_OFFSETS);
		
		Inventory a1 = GetCurrentAmmo();
		if (a1 != null) DrawString(mHUDFont, FormatNumber(a1.Amount, 3), (44, 171), DI_TEXT_ALIGN_RIGHT|DI_NOSHADOW);
		DrawString(mHUDFont, FormatNumber(CPlayer.health, 3), (90, 171), DI_TEXT_ALIGN_RIGHT|DI_NOSHADOW);
		DrawString(mHUDFont, FormatNumber(GetArmorAmount(), 3), (221, 171), DI_TEXT_ALIGN_RIGHT|DI_NOSHADOW);

		DrawBarKeys();
		DrawBarAmmo();
		DrawAllyStatus();
		DrawEmoleyStuff();
		
		if (deathmatch || teamplay)
		{
			DrawString(mHUDFont, FormatNumber(CPlayer.FragCount, 3), (138, 171), DI_TEXT_ALIGN_RIGHT);
		}
		else
		{
			DrawBarWeapons();
		}
		
		if (multiplayer)
		{
			DrawImage("STFBANY", (143, 168), DI_ITEM_OFFSETS|DI_TRANSLATABLE);
		}
		
		if (CPlayer.mo.InvSel != null && !Level.NoInventoryBar)
		{
			DrawInventoryIcon(CPlayer.mo.InvSel, (160, 198));
			if (CPlayer.mo.InvSel.Amount > 1)
			{
				DrawString(mAmountFont, FormatNumber(CPlayer.mo.InvSel.Amount), (175, 198-mIndexFont.mFont.GetHeight()), DI_TEXT_ALIGN_RIGHT, Font.CR_GOLD);
			}
		}
		else
		{
			DrawTexture(GetMugShot(5), (143, 168), DI_ITEM_OFFSETS);
		}
		if (isInventoryBarVisible())
		{
			DrawInventoryBar(diparms, (48, 169), 7, DI_ITEM_LEFT_TOP);
		}
		
	}
	
	virtual void DrawEmoleyStuff()
	{
		cvar extraXcvar = cvar.findcvar("smileyUI_X");
		int extraX2 = (extraXcvar.GetInt ());
		
		cvar extraYcvar = cvar.findcvar("smileyUI_Y");
		int extraY2 = (extraYcvar.GetInt ());
		
		cvar scaleXcvar = cvar.findcvar("smileyUI_scaleX");
		int scaleX2 = (scaleXcvar.GetInt());
		
		cvar scaleYcvar = cvar.findcvar("smileyUI_scaleY");
		int scaleY2 = (scaleYcvar.GetInt());

		Emoley SmileyPlaya = Emoley(CPlayer.mo);
		
		if (!SmileyPlaya) return;

		int LivesLeft = SmileyPlaya.Lives;
		DrawString(mIndexFont, FormatNumber(LivesLeft, 1), (extraX2, extraY2), DI_TEXT_ALIGN_RIGHT);

		if (SmileyPlaya && SmileyPlaya.SelfResurrectHUD && !ResurrectHUDSide)
		{
			ResurrectHUDSide = true;
			
			// We can't modify Player variables from the HUD, sadly
			EventHandler.SendNetworkEvent("ResurrectHUDDone");
		}

		if (SmileyPlaya && !SmileyPlaya.SelfResurrectHUD && ResurrectHUDSide)
		{
			// HUD Count is used as a counter for frame pic
			// HUD Frames is used as Tics
			// SphereImage is string formatted to res*HUD Count number here*
			// and lastly sphereTex is used for Screen.DrawTexture
			if (ResurrectHUDCount < 20)
			{
				ResurrectHUDFrames++;

				if (ResurrectHUDFrames == 5)
				{
					ResurrectHUDCount++;
					SphereImage = String.Format("res%i", ResurrectHUDCount);
					ResurrectHUDFrames = 0;
				}

				// This actually scales with resolution, good thing to have
				sphereTex = TexMan.CheckForTexture(SphereImage, TexMan.Type_Any);
				vector2 texsize;
				vector2 pos = (950,936);
				[texsize.x, texsize.y] = TexMan.GetSize(sphereTex);            
				Screen.DrawTexture(sphereTex, false, pos.x, pos.y,
				    DTA_VirtualWidthF, 1920,
				    DTA_VirtualHeightF, 1080,
				    DTA_KeepRatio, true,
				    DTA_DestWidth, int(texsize.x+900),
				    DTA_DestHeight, int(texsize.y+900),
					DTA_Alpha, 0.66
				);
			}
			else
			{
				ResurrectHUDCount = 0;
				ResurrectHUDFrames = 0;
				ResurrectHUDSide = false;
			}
		}
	}

	protected virtual void DrawAllyStatus()
	{
		// Draws Either Smiley Head's or Uncle Smiley's (or Emoley's) mugshot if playing on Easy difficulty
		// or got a cellphone

		SmileyPlayer SmileyPlaya = SmileyPlayer(CPlayer.mo);

		string mugshotImage;
		
		// after a level change it breaks the HUD
		if (CurrentLevel != level.mapname)
		{
			AllyDMGDelay = 0;
			AllyMugshotIdleTime = 0;
			CurrentLevel = level.mapname;
		}
		
		if (SmileyPlaya && SmileyPlaya.MyFollower)
		{
			let follower = SmileyFollower(SmileyPlaya.MyFollower);
			string SmileyAllyType = follower.SmileyType;
			
			DrawImage("STFBANY", (10, 137), DI_ITEM_OFFSETS|DI_TRANSLATABLE);
			
			static const int MugshotDamageLevels[] = {
					80, 60, 40, 20, 1
			};
	
			int mugshotDamageState = 0;
			for (int i = 0; i < MugshotDamageLevels.Size (); i++)
			{
				if (follower.Health <= MugshotDamageLevels [i])
				{
					mugshotDamageState = i+1;
				}
			}
			
			if (AllyHealth != follower.Health)
			{
				if (follower.Health > AllyHealth)
					AllyHealth = follower.Health; // Gained Health, do not update frames
				else
				{
					// Health was reduced!
	
					AllyHealth = follower.Health;
	
					// Only do DMG Frame delay if the health is more than or equal to 1
					if (follower.Health >= 1)
						AllyDMGDelay = level.time + 40;
	
					if (follower.attacker)
					{
						double badguyangle = follower.AngleTo(follower.attacker);
						double diffang = follower.DeltaAngle(follower.angle, badguyangle);	
	
						if (diffang < 45.) // right
							AllyDMGDir = 2;
						else if (diffang > .45) // left							
							AllyDMGDir = 0;
	
						if (diffang < 25 && diffang > -25) // face forward
							AllyDMGDir = 1;
					}
					else
						AllyDMGDir = 1;
				}
			}
			
			if (follower.Health <= 0)
			{
				mugshotImage = string.Format("%sDEAD0", SmileyAllyType);
			}
			else if (AllyDMGDelay < level.time)
			{		
				// Randomize the frames on the Mugshot.
				if (AllyMugshotIdleTime < level.time)
				{
					AllyMugshotIdleTime = level.time + random[amsit](17, 35);
					AllyMugshotIdleRND = random[mir](0, 2);
				}
	
				mugshotImage = string.Format("%sST%i%i", SmileyAllyType, mugshotDamageState, AllyMugshotIdleRND);
				
			}
			else
			{
				switch (AllyDMGDir)
				{
					case 0:
					// Face left
						mugshotImage = string.Format("%sTL%i0", SmileyAllyType, mugshotDamageState);
						break;
					case 1:
					// Face forward
						mugshotImage = string.Format("%sKILL%i", SmileyAllyType, mugshotDamageState);
						break;
					case 2:
					// Face right
						mugshotImage = string.Format("%sTR%i0", SmileyAllyType, mugshotDamageState);
						break;
					default:
						break;
				}
			}
	
			DrawImage(mugshotImage, (10, 136), DI_ITEM_OFFSETS);
	
			DrawString(mHUDFont, FormatNumber(follower.health, 3), (21, 137), DI_TEXT_ALIGN_LEFT|DI_NOSHADOW, Font.CR_UNTRANSLATED, 0.6, -1, 4, (0.35,0.35));
		}
	}

	protected virtual void DrawBarKeys()
	{
		bool locks[6];
		String image;
		for(int i = 0; i < 6; i++) locks[i] = CPlayer.mo.CheckKeys(i + 1, false, true);
		// key 1
		if (locks[1] && locks[4]) image = "STKEYS6";
		else if (locks[1]) image = "STKEYS0";
		else if (locks[4]) image = "STKEYS3";
		DrawImage(image, (239, 171), DI_ITEM_OFFSETS);
		// key 2
		if (locks[2] && locks[5]) image = "STKEYS7";
		else if (locks[2]) image = "STKEYS1";
		else if (locks[5]) image = "STKEYS4";
		else image = "";
		DrawImage(image, (239, 181), DI_ITEM_OFFSETS);
		// key 3
		if (locks[0] && locks[3]) image = "STKEYS8";
		else if (locks[0]) image = "STKEYS2";
		else if (locks[3]) image = "STKEYS5";
		else image = "";
		DrawImage(image, (239, 191), DI_ITEM_OFFSETS);
	}
	
	protected virtual void DrawBarAmmo()
	{
		if (CPlayer.Mo is 'Emoley')
		{
			int amt1, maxamt;
			[amt1, maxamt] = GetAmount("EmoleyMana");
			DrawString(mIndexFont, FormatNumber(amt1, 3), (314, 173), DI_TEXT_ALIGN_RIGHT);
			
			[amt1, maxamt] = GetAmount("EmoleyEnergy");
			DrawString(mIndexFont, FormatNumber(amt1, 3), (314, 179), DI_TEXT_ALIGN_RIGHT);
			
			
			
			[amt1, maxamt] = GetAmount("EmoleyMinions");
			DrawString(mIndexFont, FormatNumber(amt1, 3), (314, 191), DI_TEXT_ALIGN_RIGHT);
			
			return;
		}

		int amt1, maxamt;
		[amt1, maxamt] = GetAmount("SmileyClip");
		DrawString(mIndexFont, FormatNumber(amt1, 3), (288, 173), DI_TEXT_ALIGN_RIGHT);
		DrawString(mIndexFont, FormatNumber(maxamt, 3), (314, 173), DI_TEXT_ALIGN_RIGHT);
		
		[amt1, maxamt] = GetAmount("SmileyShell");
		DrawString(mIndexFont, FormatNumber(amt1, 3), (288, 179), DI_TEXT_ALIGN_RIGHT);
		DrawString(mIndexFont, FormatNumber(maxamt, 3), (314, 179), DI_TEXT_ALIGN_RIGHT);
		
		[amt1, maxamt] = GetAmount("ChickenAmmo");
		DrawString(mIndexFont, FormatNumber(amt1, 3), (288, 185), DI_TEXT_ALIGN_RIGHT);
		DrawString(mIndexFont, FormatNumber(maxamt, 3), (314, 185), DI_TEXT_ALIGN_RIGHT);
		
		[amt1, maxamt] = GetAmount("Ring");
		DrawString(mIndexFont, FormatNumber(amt1, 3), (288, 191), DI_TEXT_ALIGN_RIGHT);
		DrawString(mIndexFont, FormatNumber(maxamt, 3), (314, 191), DI_TEXT_ALIGN_RIGHT);
	}
	
	protected virtual void DrawBarWeapons()
	{
		DrawImage("STARMS", (104, 168), DI_ITEM_OFFSETS);
		DrawImage(CPlayer.HasWeaponsInSlot(2)? "STYSNUM2" : "STGNUM2", (111, 172), DI_ITEM_OFFSETS);
		DrawImage(CPlayer.HasWeaponsInSlot(3)? "STYSNUM3" : "STGNUM3", (123, 172), DI_ITEM_OFFSETS);
		DrawImage(CPlayer.HasWeaponsInSlot(4)? "STYSNUM4" : "STGNUM4", (135, 172), DI_ITEM_OFFSETS);
		DrawImage(CPlayer.HasWeaponsInSlot(5)? "STYSNUM5" : "STGNUM5", (111, 182), DI_ITEM_OFFSETS);
		DrawImage(CPlayer.HasWeaponsInSlot(6)? "STYSNUM6" : "STGNUM6", (123, 182), DI_ITEM_OFFSETS);
		DrawImage(CPlayer.HasWeaponsInSlot(7)? "STYSNUM7" : "STGNUM7", (135, 182), DI_ITEM_OFFSETS);
	}

	protected void DrawFullScreenStuff ()
	{
		Vector2 iconbox = (40, 20);
		// Draw health
		let berserk = CPlayer.mo.FindInventory("PowerStrength");
		DrawImage(berserk? "PSTRA0" : "MEDIA0", (20, -2));
		DrawString(mHUDFont, FormatNumber(CPlayer.health, 3), (44, -20));
		
		let armor = CPlayer.mo.FindInventory("BasicArmor");
		if (armor != null && armor.Amount > 0)
		{
			DrawInventoryIcon(armor, (20, -22));
			DrawString(mHUDFont, FormatNumber(armor.Amount, 3), (44, -40));
		}
		Inventory ammotype1, ammotype2;
		[ammotype1, ammotype2] = GetCurrentAmmo();
		int invY = -20;
		if (ammotype1 != null)
		{
			DrawInventoryIcon(ammotype1, (-14, -4));
			DrawString(mHUDFont, FormatNumber(ammotype1.Amount, 3), (-30, -20), DI_TEXT_ALIGN_RIGHT);
			invY -= 20;
		}
		if (ammotype2 != null && ammotype2 != ammotype1)
		{
			DrawInventoryIcon(ammotype2, (-14, invY + 17));
			DrawString(mHUDFont, FormatNumber(ammotype2.Amount, 3), (-30, invY), DI_TEXT_ALIGN_RIGHT);
			invY -= 20;
		}
		if (!isInventoryBarVisible() && !Level.NoInventoryBar && CPlayer.mo.InvSel != null)
		{
			DrawInventoryIcon(CPlayer.mo.InvSel, (-14, invY + 17));
			DrawString(mHUDFont, FormatNumber(CPlayer.mo.InvSel.Amount, 3), (-30, invY), DI_TEXT_ALIGN_RIGHT);
		}
		if (deathmatch)
		{
			DrawString(mHUDFont, FormatNumber(CPlayer.FragCount, 3), (-3, 1), DI_TEXT_ALIGN_RIGHT, Font.CR_GOLD);
		}
		
		DrawFullscreenKeys();
		
		if (isInventoryBarVisible())
		{
			DrawInventoryBar(diparms, (0, 0), 7, DI_SCREEN_CENTER_BOTTOM, HX_SHADOW);
		}
	}
	
	protected virtual void DrawFullscreenKeys()
	{
		// Draw the keys. This does not use a special draw function like SBARINFO because the specifics will be different for each mod
		// so it's easier to copy or reimplement the following piece of code instead of trying to write a complicated all-encompassing solution.
		Vector2 keypos = (-10, 2);
		int rowc = 0;
		double roww = 0;
		for(let i = CPlayer.mo.Inv; i != null; i = i.Inv)
		{
			if (i is "Key" && i.Icon.IsValid())
			{
				DrawTexture(i.Icon, keypos, DI_SCREEN_RIGHT_TOP|DI_ITEM_LEFT_TOP);
				Vector2 size = TexMan.GetScaledSize(i.Icon);
				keypos.Y += size.Y + 2;
				roww = max(roww, size.X);
				if (++rowc == 3)
				{
					keypos.Y = 2;
					keypos.X -= roww + 2;
					roww = 0;
					rowc = 0;
				}
			}
		}
	}
}